% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runGORESP.R
\name{runGORESP}
\alias{runGORESP}
\title{GO enrichment analysis using the hypergeometric test
This function performs a GO enrichment analysis using the hypergeometric test for the set of query genes passing the user-defined fitness score threshold compared to the genes in the background set (universe).
The hypergeometric test requires both a list of selected genes (e.g. your DGE genes) and a “universe” list (e.g. all genes represented that were tested for differential expression), all represented by their “SYMBOL” gene ID.}
\usage{
runGORESP(
  scoreMat,
  coln,
  curr_exp = colnames(mat)[coln],
  sig = 1,
  fdrThresh = 0.2,
  bp_path = NULL,
  bp_input = NULL,
  go_path = NULL,
  go_input = NULL,
  minSetSize = 5,
  maxSetSize = 300
)
}
\arguments{
\item{scoreMat}{A data frame, see ?runGORESP enrichInfo output for explanation of these columns}

\item{coln}{A data frame, see ?runGORESP edgeMat output for explanation of these columns}

\item{curr_exp}{fontsize for node labels; default = 22}

\item{sig}{numeric, significance threshold of fitness defect score, default is 1}

\item{fdrThresh}{numeric, fdr threshold for significance cutoff of enrichments, default = 0.2}

\item{bp_path}{character, path of gmt file}

\item{bp_input}{gmt file or NULL, **Note: bp_path and bp_input can't both be NULL}

\item{go_path}{character, path of file with GOID and terms path of gmt file;
alternatively bp_input, gmt file itself,}

\item{go_input}{dataframe with GOID and terms matching bp_input **Note: go_path and go_input can both be NULL}

\item{minSetSize}{numeric, lower limit on the number of genes in a geneset included in the analysis,
default = 5}

\item{maxSetSize}{numeric, upper limit on the number of genes in a geneset included in the analysis,
default = 300}

\item{uniSize}{The number of genes in the universe or length(uni)}
}
\value{
RETURNS two dataframes: enrichInfo with enrichment results and edgeMat with information about
geneset term overlap and clusters.
dataframe includes the columns: filename,term, nGenes, nQuery, nOverlap,
columns enrichInfo:
filename
GOID: GO ID
term: GO term
nGenes: # genes in the geneset nQuery: # genes in the query
nOverlap: # genes overlapping the query and the geneset
querySetFraction: the fraction of the query set (the set that passes the significance threshold) that overlaps with the term set
geneSetFraction: the fraction of the term set that overlaps with the query set
foldEnrichment = the fold enrichment of the query set over the
bgRate, where bgRate is nGenes in geneSet/genes in the universe
P = P value estimating the significance with which the query set is enriched with the term genes
FDR = FDR value estimating the significance of enrichment
overlapGenes = a |-separated list of genes that overlap the query set and the geneSet
if scoreMat is provided (not NULL), the scores of the genes are shown in parentheses
maxOverlapGeneScore = if scoreMat is provided (not NULL), the maximum score of the overlapGenes
cluster: cluster color based on overlap of term ID, set as 50
id: cluster ID size: node size for downstream plotting based on FDR score formatted
label: for downstream plotting
columns edgeMat:
source id from enrichInfo
target id from enrichInfo
overlapCoeff is defined as a function of all possible pairs of geneSets
overlapCoeff = function(gsPairList) {
length(intersect(gsPairList[[1]], gsPairList[[2]]))/min(length(gsPairList[[1]]),
length(gsPairList[[2]]))}
width
label These map GO terms from the enrichInfo data.frame serving to show the overlap between terms for downstream visualization purposes and for understanding the relationship between terms

A list with two data frames:
\describe{
  \item{enrichInfo}{Data frame with GO enrichment results, including columns:}
  \describe{
    \item{querySetFraction}{The fraction of the query set overlapping the term set.}
    \item{geneSetFraction}{The fraction of the term set overlapping the query set.}
    \item{foldEnrichment}{The fold enrichment of the query set with term genes.}
    \item{P}{P-value estimating significance of query set enrichment.}
    \item{FDR}{False discovery rate for enrichment significance.}
    \item{overlapGenes}{A list of genes in the overlap between query and term set.}
    \item{maxOverlapGeneScore}{The maximum score among overlapping genes if \code{scoreMat} is provided.}
    \item{cluster}{Cluster color information based on term ID overlap.}
    \item{id}{Cluster ID.}
    \item{size}{Node size for plotting based on FDR score.}
    \item{formattedLabel}{Label formatted for downstream visualization.}
  }
  \item{edgeMat}{Data frame with information about gene set term overlaps, for visualization, including columns:}
  \describe{
    \item{source}{ID from enrichInfo, representing the source node in the overlap network.}
    \item{target}{ID from enrichInfo, representing the target node in the overlap network.}
    \item{overlapCoeff}{Coefficient representing the overlap between terms.}
    \item{width}{Edge width based on overlap, used for visualization.}
    \item{label}{Label showing overlap between terms for downstream visualization.}
  }
}
}
\description{
GO enrichment analysis using the hypergeometric test
This function performs a GO enrichment analysis using the hypergeometric test for the set of query genes passing the user-defined fitness score threshold compared to the genes in the background set (universe).
The hypergeometric test requires both a list of selected genes (e.g. your DGE genes) and a “universe” list (e.g. all genes represented that were tested for differential expression), all represented by their “SYMBOL” gene ID.
}
\examples{
# Example usage:
scoreMat = compSCORE(mat, coln, sig = sig)
curr_exp = colnames(mat)[coln]
hresp <- GOenrichment::runGORESP(fdrThresh = 0.2, scoreMat = scoreMat,
  coln=1, curr_exp = curr_exp, sig = 1,
  bp_input = hGOBP.gmt, go_input = NULL, minSetSize = 20,
  maxSetSize = 300)
}
